@model IEnumerable<Review>
@inject IApplicationUserServices Service
@inject ILikeService Likes
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@foreach (var review in Model)
{
    var userReviewId = review.UserId.ToString();
    <div class="media p-3">
        <img class="mr-3 mt-2 rounded" id="reviewPicture" src="@Url.Content("..\\..\\" + Service.GetFolderWithFile(userReviewId))" />
        <div class="media-body textAlign">
            <h5>@Service.GetNameOfTheSpecifiedId(userReviewId) <small>on @review.Date.ToShortDateString()</small></h5>
            <p>
                @review.Description
            </p>

            @if (SignInManager.IsSignedIn(User))
            {
                var comment = "commentOption" + @review.Id;
                var likes = "likes" + @review.Id;
                <div class="btn-group">
                    <button type="submit" class="btn btn-outline-dark" onclick="Upvote(this.value)" value="@review.Id"><i class="fa fa-arrow-up"></i></button>
                    <input type="button" class="btn btn-outline-dark disabled" id="@likes" value="@Likes.GetNumberOfLikes(review.Id)" />
                    <button type="submit" class="btn btn-outline-dark" onclick="Downvote(this.value)" value="@review.Id"><i class="fa fa-arrow-down"></i></button>
                    <button type="button" class="btn btn-outline-dark" value="@comment" onclick="displayComment(this.value)"><i class="fa fa-comment"></i></button>
                </div>
            }

            @foreach (var comment in review.Comments)
            {
                var userCommentId = comment.UserId.ToString();
                <div class="media p-2">
                    <img class="mr-3 mt-2 rounded" id="reviewPicture" src="@Url.Content("..\\..\\" + Service.GetFolderWithFile(userCommentId))" />
                    <div class="media-body textAlign">
                        <h5>@Service.GetNameOfTheSpecifiedId(userCommentId) <small>on @review.Date.ToShortDateString()</small></h5>
                        <p>@comment.Text</p>

                        @if (SignInManager.IsSignedIn(User))
                        {
                            var likes = "likes" + @comment.Id;
                            <div class="btn-group">
                                <button type="submit" class="btn btn-outline-dark" onclick="Upvote(this.value)" value="@comment.Id"><i class="fa fa-arrow-up"></i></button>
                                <input type="button" class="btn btn-outline-dark disabled" id="@likes" value="@Likes.GetNumberOfLikes(comment.Id)" />
                                <button type="submit" class="btn btn-outline-dark" onclick="Downvote(this.value)" value="@comment.Id"><i class="fa fa-arrow-down"></i></button>
                            </div>
                        }
                    </div>
                </div>
            }

            @if (SignInManager.IsSignedIn(User))
            {
                var userId = UserManager.GetUserId(User);
                var comment = "commentOption" + @review.Id;
                <div id="@comment" style="display: none;">
                    <div class="media p-2">
                        <img class="mr-3 rounded" id="reviewPicture" src="@Url.Content("..\\..\\" + Service.GetFolderWithFile(userId))" />
                        <div class="media-body textAlign">
                            @using (Html.BeginForm("Create", "Comments", new { userId = Guid.Parse(userId), targetId = review.Id }, FormMethod.Post, null, new { }))
                            {
                                <input type="text" id="commentText" name="commentText" placeholder="Write a comment.." />
                                <button type="button" id="commentButton" class="btn textButton"></button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}