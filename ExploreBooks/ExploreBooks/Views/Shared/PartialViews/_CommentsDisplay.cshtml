@model IEnumerable<Comment>
@inject IApplicationUserServices Service
@inject ILikeService Likes
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<environment include="Development">
    <link rel="stylesheet" href="~/css/PartialPosts.css" />
</environment>

@foreach (var comment in Model)
{
    var userCommentId = comment.UserId.ToString();
    var userId = UserManager.GetUserId(User);
    <div class="media p-2">
        <img class="mr-3 mt-2 rounded" id="reviewPicture" src="@Url.Content("..\\..\\" + Service.GetFolderWithFile(userCommentId))" />
        <div class="media-body textAlign">
            <h5>@Service.GetNameOfTheSpecifiedId(userCommentId) <small>on @comment.Date.ToShortDateString()</small></h5>
            
            @if (userId == comment.UserId.ToString())
            {
                <form asp-controller="Comments" asp-action="Edit" method="post" role="form" id="@comment.Id">
                    @Html.Hidden("postId", comment.PostId)
                    <span type="text" class="displayComment" name="commentEdited">
                        @comment.Text
                    </span>
                    <button type="button" id="commentButton" class="btn textButton"></button>
                </form>
            }
            else
            {
                <p>
                    @comment.Text
                </p>
            }

            @if (SignInManager.IsSignedIn(User))
            {
                var likes = "likes" + @comment.Id;
                <div class="btn-group">
                    <button type="submit" class="btn btn-outline-dark" onclick="Upvote(this.value, '@Guid.Parse(userId)')" value="@comment.Id"><i class="fa fa-arrow-up"></i></button>
                    <input type="button" class="btn btn-outline-dark disabled" id="@likes" value="@Likes.GetNumberOfLikes(comment.Id)" />
                    <button type="submit" class="btn btn-outline-dark" onclick="Downvote(this.value, '@Guid.Parse(userId)')" value="@comment.Id"><i class="fa fa-arrow-down"></i></button>
                    
                    @if (userId == comment.UserId.ToString())
                    {
                        <button type="button" class="btn btn-outline-dark" onclick="DeleteComment(this.value, '@comment.PostId')" value="@comment.Id"><i class="fa fa-times"></i></button>                   
                    }

                </div>
            }
        </div>
    </div>
}

<environment include="Development">
    <script>
        function DeleteComment(target, post) {
            $.ajax({
                url: "/Comments/Delete",
                data: { id: target },
                type: "POST",
                success: function () {
                    var result = "@Url.Action("GetAllCommentsForUserId", "Comments")?postId=" + post;
                    $("#" + post).load(result);
                }
            });
        }
        //function Edit(target) {
        //    var comment = "#" + target;
        //    var commentContent = $(comment).find("span[name='commentEdited']");

        //    if (commentContent.prop("contenteditable") == true) {
        //        console.log("baka");
        //        commentContent.contentEditable = false;
        //    } else {
        //        commentContent.prop("contenteditable", true);
        //    }
            
        //    $(comment).submit(function (e) {
        //        e.preventDefault();
        //        var target = this.postId.value;
        //        var comment = $(this).find("span[name='commentEdited']").val();
        //        $.ajax({
        //            url: "/Comments/Edit",
        //            data: { postId: target, commentEdited: comment },
        //            type: "POST",
        //            success: function () {
        //                commentContent.prop("contenteditable", false);
        //            }
        //        });
        //    });
        //}
    </script>
</environment>